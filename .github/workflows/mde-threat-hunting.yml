name: MDE Threat Hunting
run-name: "MDE Hunt: ${{ github.event.inputs.mode || 'auto' }} (${{ github.event.inputs.lookback || '24h' }})"

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
    inputs:
      mode:
        description: 'Hunting mode'
        type: choice
        default: 'standard'
        options: ['critical', 'standard', 'comprehensive']
      lookback:
        description: 'Lookback period'
        type: choice
        default: '24h'
        options: ['6h', '24h', '7d', '30d']
      platform:
        description: 'Target platform'
        type: choice
        default: 'all'
        options: ['all', 'windows', 'linux', 'macos']

permissions:
  contents: read
  security-events: write

env:
  RESULTS_DIR: results/hunting

jobs:
  hunt:
    name: Execute Threat Hunt
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 45
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          # Cleanup old results
          find results -type f -mtime +7 -delete 2>/dev/null || true
          find .github/security -type f -mtime +30 -delete 2>/dev/null || true
          
          # Create directories
          mkdir -p results/hunting .github/security logs
          
          # Install PowerShell if needed
          if ! command -v pwsh &> /dev/null; then
            wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update -qq
            sudo apt-get install -y powershell
            rm packages-microsoft-prod.deb
          fi
      
      - name: Install PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          if (-not (Get-Module -ListAvailable Microsoft.Graph.Security)) {
            Install-Module Microsoft.Graph.Security -Force -Scope CurrentUser
          }
      
      - name: Load credentials
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_READ }}
          MDE_TENANT_ID: op://Security Automation/MDE API Credentials/MDE_TENANT_ID
          MDE_CLIENT_ID: op://Security Automation/MDE API Credentials/MDE_CLIENT_ID
          MDE_CLIENT_SECRET: op://Security Automation/MDE API Credentials/MDE_CLIENT_SECRET
      
      - name: Execute hunting queries
        id: hunt
        shell: pwsh
        run: |
          $mode = '${{ github.event.inputs.mode }}' -or 'standard'
          $lookback = '${{ github.event.inputs.lookback }}' -or '24h'
          $platform = '${{ github.event.inputs.platform }}'
          
          # Define query sets based on mode
          $queryPattern = switch ($mode) {
            'critical' { 'credential_dumping|defense_evasion|ransomware|malware|privilege' }
            'comprehensive' { '*' }
            default { '*' }
          }
          
          # Get queries
          $queries = Get-ChildItem queries -Filter "*.kql" | Where-Object {
            $_.Name -match $queryPattern -and 
            ($platform -eq '' -or $_.Name -like "${platform}_*")
          }
          
          Write-Host "Executing $($queries.Count) queries with $lookback lookback"
          
          $totalFindings = 0
          $findings = @()
          
          foreach ($query in $queries) {
            Write-Host "Processing: $($query.BaseName)"
            
            try {
              $result = & "./scripts/hunt.ps1" -QueryFile $query.FullName -Lookback $lookback
              if ($result.Count -gt 0) {
                $totalFindings += $result.Count
                $findings += @{
                  Query = $query.BaseName
                  Count = $result.Count
                  Severity = if ($query.Name -match 'critical|credential|ransomware') { 'High' } else { 'Medium' }
                }
                
                # Save results
                $result | Export-Csv "results/hunting/$($query.BaseName).csv" -NoTypeInformation
              }
            } catch {
              Write-Warning "Failed to execute $($query.Name): $_"
            }
          }
          
          # Generate report
          if ($totalFindings -gt 0) {
            $findings | ConvertTo-Json | Out-File "results/hunting/summary.json"
            
            # Create SARIF
            $sarif = @{
              version = "2.1.0"
              runs = @(@{
                tool = @{
                  driver = @{
                    name = "MDE-Threat-Hunter"
                    version = "2.0.0"
                  }
                }
                results = $findings | ForEach-Object {
                  @{
                    ruleId = $_.Query
                    level = $_.Severity.ToLower()
                    message = @{ text = "$($_.Count) findings detected by $($_.Query)" }
                  }
                }
              })
            } | ConvertTo-Json -Depth 10
            
            $sarif | Out-File "results/hunting/findings.sarif"
            
            echo "has_findings=true" >> $env:GITHUB_OUTPUT
            echo "total_findings=$totalFindings" >> $env:GITHUB_OUTPUT
          } else {
            echo "has_findings=false" >> $env:GITHUB_OUTPUT
            echo "total_findings=0" >> $env:GITHUB_OUTPUT
          }
      
      - name: Upload security findings
        if: steps.hunt.outputs.has_findings == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/hunting/findings.sarif
          category: mde-threat-hunting
      
      - name: Archive results
        if: steps.hunt.outputs.has_findings == 'true'
        run: |
          cp results/hunting/findings.sarif .github/security/hunt-$(date +%Y%m%d-%H%M).sarif
      
      - name: Summary
        run: |
          echo "## Threat Hunting Results" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${{ github.event.inputs.mode || 'standard' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Lookback:** ${{ github.event.inputs.lookback || '24h' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Findings:** ${{ steps.hunt.outputs.total_findings || '0' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.hunt.outputs.has_findings }}" == "true" ]; then
            echo "⚠️ Security findings detected - check GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security findings detected" >> $GITHUB_STEP_SUMMARY
          fi
