DeviceNetworkEvents
| where DeviceNetworkEvents.Timestamp > ago(24h)
// Removed OSPlatform filter and relying on Linux-specific processes instead
| where DeviceNetworkEvents.ActionType == "ConnectionSuccess"
| where DeviceNetworkEvents.InitiatingProcessFileName in~ (
    "nc", 
    "ncat", 
    "netcat", 
    "socat", 
    "python", 
    "python3", 
    "perl", 
    "ruby", 
    "bash", 
    "sh", 
    "ssh", 
    "scp", 
    "sftp"
)
| where DeviceNetworkEvents.RemotePort in (
    21, 22, 23, 25, 80, 443, 445, 3389, 4444, 5555, 8080, 8443, 9001, 9050
)
| where not(DeviceNetworkEvents.RemoteIP matches regex @"^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.|127\.)")
| extend CountryInfo = geo_info_from_ip_address(DeviceNetworkEvents.RemoteIP)
| extend Country = tostring(parse_json(CountryInfo).country)
| project
    DeviceNetworkEvents.Timestamp,
    DeviceNetworkEvents.DeviceName,
    DeviceNetworkEvents.LocalIP,
    DeviceNetworkEvents.LocalPort,
    DeviceNetworkEvents.RemoteIP,
    DeviceNetworkEvents.RemotePort,
    Country,
    DeviceNetworkEvents.InitiatingProcessFileName,
    DeviceNetworkEvents.InitiatingProcessCommandLine,
    DeviceNetworkEvents.InitiatingProcessAccountName,
    ReportId=hash(strcat(DeviceNetworkEvents.DeviceName, DeviceNetworkEvents.RemoteIP, DeviceNetworkEvents.InitiatingProcessFileName))
