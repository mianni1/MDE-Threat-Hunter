DeviceEvents
| where DeviceEvents.Timestamp > ago(24h)
// Removed OSPlatform filter and relying on macOS-specific detection paths instead
| where DeviceEvents.ActionType in ("AntivirusMalwareDetected", "SuspiciousFileRemoved", "SuspiciousFileQuarantined", "ProcessBlockedForExecution")
| project
    DeviceEvents.Timestamp,
    DeviceEvents.DeviceName,
    DeviceEvents.ActionType,
    DeviceEvents.FileName,
    DeviceEvents.FolderPath,
    DeviceEvents.SHA256,
    DeviceEvents.InitiatingProcessFileName,
    DeviceEvents.InitiatingProcessFolderPath,
    DeviceEvents.InitiatingProcessAccountName,
    ThreatName = DeviceEvents.AdditionalFields.ThreatName,
    DetectionSource = DeviceEvents.AdditionalFields.DetectionSource,
    ReportId=hash(strcat(DeviceEvents.DeviceName, DeviceEvents.FileName, DeviceEvents.FolderPath))
| union (
    DeviceProcessEvents
    | where DeviceProcessEvents.Timestamp > ago(24h)
    // Removed OSPlatform filter and relying on macOS-specific paths instead
    | where DeviceProcessEvents.FolderPath has_any("/tmp/", "/private/tmp/", "/var/tmp/", "/private/var/tmp/", "/Library/Application Support/")
    | where not(DeviceProcessEvents.InitiatingProcessFolderPath has_any("/Applications/", "/System/Library/"))
    | where DeviceProcessEvents.FileName has_any(".py", ".sh", ".bin", ".js", ".pl", ".rb", "python", "perl", "ruby", "bash", "sh", "zsh")
    | where DeviceProcessEvents.ProcessCommandLine has_any("curl", "wget", "nc ", "ncat ", "python -m", "import socket", "connect()", "exec()", "eval()", "system()", "popen()", "subprocess", "spawn()", "fork()")
    | project
        DeviceProcessEvents.Timestamp,
        DeviceProcessEvents.DeviceName,
        DeviceProcessEvents.AccountName,
        DeviceProcessEvents.ProcessCommandLine,
        DeviceProcessEvents.FileName,
        DeviceProcessEvents.FolderPath,
        DeviceProcessEvents.SHA256,
        DeviceProcessEvents.InitiatingProcessFileName,
        DeviceProcessEvents.InitiatingProcessCommandLine,
        ReportId=hash(strcat(DeviceProcessEvents.DeviceName, DeviceProcessEvents.FileName, DeviceProcessEvents.ProcessCommandLine))
)
